<document>
	<properties>
		<author email="manuel.reithuber@student.tuwien.ac.at">Manuel Reithuber</author>
		<author email="brandiatmuhkuh@gmail.com">JÃ¼rgen Brandstetter</author>
		<author email="e0726383@student.tuwien.ac.at">Ruth Kendlbacher</author>
		<author email="e0625658@student.tuwien.ac.at">Mathias Kunter</author>
		<author email="e0727280@student.tuwien.ac.at">Anca Cismasiu</author>
		<title>Projektauftrag</title>
	</properties>
	<head>
		<style type="text/css">
			ol li {
				margin-bottom: 1em;
			}
		</style>
	</head>
	<body>
		<section name="Besprechungsprotokoll: 23.04.2009">
			<i> Anwesend: Jürgen Brandstetter, Anca Cismasiu, Ruth Kendlbacher, Mathias Kunter, Manuel Reithuber</i><br/><br/>
			<ul>
				<li>Google Plugin für Eclipse wird benutzt</li>
				<li>Internationalisierung: zB Wikipedia Artikel in verschiedenen Sprachen, wechseln zwischen de.wiki,...? </li>
				<li>2 Kategorien: zeitabhängige -  permanente </li>
				<li>2 Möglichkeiten: Daten werden auf Anfrage abgefragt oder Daten werden in bestimmten Zeitabständen akualisiert </li>
				<li>Proxy Prinzip!! </li>
			</ul>
			<subsection name="Featureliste">
				<ul>
					<li>
					Suchen
					<ul>
							<li>Tag und Orts Suchen (optional) (Autovervollständigung beim Suchen?)</li>
							<li>Unübersichtlichkeit vermeiden: durch Filter, Zoom (Menü Leiste bei Klick mit Filter Icons)</li>
							<li>TagCloud mit Kategorien</li>
							<li>Oder suche ??</li>
						</ul>
					</li><li>
					Anzeigen
					<ul>
							<li>abhängig von Zeit und Ort</li>
							<li>Anzeigelimit (dieses dem Benutzer auch klar machen)</li>
							<li>Navigation im Kartenausschnitt: Zoom</li>
							<li>Detailgrad ändern: Zoomlevel</li>
							<li>Ergebniscounter</li>
						</ul>
					</li><li>
					Crawler (Interface)
					<ul>
							<li>-	unterschiedliche Crawler für jede Website die unterschiedliche APIs haben</li>
							<li>wenn Suche nicht erfolgreich: Crawler crawlt danach und die neuen Ergebnisse werden abgespeichert (Objekte in der DB haben eine expiration date)</li>
							<li>Startapplikation um Daten in die DB zu füllen</li>
							<li>zu jedem Eintrag wird der Permalink gespeichert</li>
						</ul>
					</li><li>
					API
					<ul>
							<li>Abfrage, Einfügen und Veränderung der Daten soll durch externe Seiten möglich sein</li>
						</ul>
					</li><li>
					Anderes
					<ul>
							<li>Möglichkeit die Ergebnisse zu sharen zB über Social Networks</li>
						</ul>
					</li>
				</ul>
			</subsection>
			<subsection name="Technologien">
				Java, Maven, Spring, SVN, GoogleDocs, JUnit, Log4J, Laconica, Postgres, Eclipse, VisualParadigm, Java Servlets, Java Server Pages, Apache Tomcat, GWT, GoogleMaps API
			</subsection>
		</section>
		<section name="Besprechungsprotokoll: 29.04.2009">
			<i> Anwesend: Jürgen Brandstetter, Anca Cismasiu, Ruth Kendlbacher, Mathias Kunter, Manuel Reithuber</i>
			<subsection name="Allgemeines">
				Maven, SVN, Tomcat eingerichtet<br/>
				Projektauftrag überarbeiten (Einteilung siehe GoogleDocs)
			</subsection>
			<subsection name="Unterschiede zu GoogleMaps">
				<ul>
					<li>GM hat kleinen Kontext</li>
					<li>Inhalt der Sprechblase ändert sich dynamisch</li>
					<li>API so designed, dass es leicht erweitert werden kann</li>
				</ul>
			</subsection>
			<subsection name="Milestones">
				<table>
					<tr><th>Datum</th><th>Milestone</th></tr>
					<tr><td>22.05.2009</td><td>
							<ul><li>
							alpha-Version
								<ul>
										<li>fertige GUI</li>
										<li>fertiges DB-Schema</li>
										<li>Testdatensätze und Marker anzeigen</li>
									</ul>
								</li></ul>
						</td></tr>
					<tr><td>14.06.2009</td><td>beta-Version</td></tr>
					<tr><td>19.06.2009</td><td>Test abgeschlossen</td></tr>
					<tr><td>14.06.2009</td><td>fertiges Produkt</td></tr>
				</table>
			</subsection>
			<subsection name="Wichtige Arbeitsschritte">
				<img src="images/Implementierungsverlauf_grob.jpg" alt="Bild: grobe Übersicht über Arbeitsschritte"/>
			</subsection>
		</section>
		<section name="Besprechungsprotokoll: 05.05.2009">
			<i> Anwesend: Jürgen Brandstetter, Anca Cismasiu, Ruth Kendlbacher, Mathias Kunter, Christian Mastnak, Manuel Reithuber</i>
			<subsection name="Allgemeines">
				<ul>
					<li>besser wöchentliche Milestones, damit in kleinerer Teile geteilt und der zeitliche Rahmen indem Milestone erledigt werden soll besser erkennbar; bei Tickets: eintragen wer es 
						macht, wenn mehrere beteiligt, dann evtl. für jeden ein einzelnes Ticket</li>
					<li>Christian unserer Dokumente rechtzeitig schicken, damit er genug Zeit hat sie bis Dienstag durchzuschauen </li>
					<li>wir bekommen eine Liste mit den Richtlinien, die für Webanwendungen relevant sind</li>
					<li>Dokumente gegendert</li>
					<li>Aktorenhierarchie kann bei uns weggelassen werden (außer: registrierter User -&gt; User) </li>
					<li>Technologien für GANTT Diagramm: Microsoft Project, Gantt Project (Freeware), Open Gantt (Freeware)</li>
				</ul>
			</subsection>
			<subsection name="GUI">
				<ul>
					<li>genauere Beschreibung zur Skizze („Das ist der Suchbutton…“), welche Elemente können verändert werden, welche nicht, wie kann sich der User durchklicken</li>
					<li>Erklärung zur TagCloud: kann man was anklicken, wie wird sie erstellt, wann refreshed, was ist der genaue Unterschied zwischen der TagCloud in der Detailansicht zur TagCloud
						 neben der Karte (=&gt; auch User soll wissen wo der Unterschied liegt!!), welche Bedeutung haben plus und minus (woher weiß das der User, evtl. + /- immer sichtbar, nicht erst 
						durch Mauszeiger =&gt; damit User weiß, dass es hier was zum klicken gibt)</li>
					<li>erklären warum z.B. nur zehn Treffer angezeigt werden, warum ausgerechnet diese (definieren!)</li>
					<li>für den User intuitiver wenn bei den Textfeldern das Allgemeine über dem Speziellen, also oben das Gebiet in dem gesucht werden soll, unten der Tag</li>
					<li>Problem Lupe als Button für die Suche, ungeübte User könnten die Lupe als Zoom verstehen =&gt; gibt es ein eigenes Zoomelement (man kann nicht voraussetzten, dass alle ein 
						Mausrad haben)? wie verschiebt man die Karte nach links und rechts und was passiert dann?</li>
					<li>bei der Detailansicht eine genaue Erklärung was von uns zur Verfügung gestellt wird und was durch externe Services (am besten gleich in die GUI Skizze Textfelder einfügen, die 
						genau beschriften das ist fremd, das stellen wir hier hinein und dazu ist das gut); außerdem erklären woher die Daten und Beschriftungen her sind (Logos, Fotographen,…)</li>
					<li>auch in einer GUI Skizze zeigen, dass es bei bestimmten Positionen zu Anhäufungen von Icons kommen kann (also 5 Fotos, ein Wiki, ein Event…)</li>
					<li>Twitter nicht in der GUI Skizze, damit LVA Leitung nicht glaubt, dass wir das implementieren!</li>
				</ul>
			</subsection>
			<subsection name="Anwendungsfälle: Beschreibung">
				<ul>
					<li>ca. 30 Anwendungsfälle reichen: alle auf der GUI und im ER Diagramm nachspielen, um zu Überprüfen ob alle Aspekte berücksichtigt wurden (alle Fehler-, 
						Alternativbehandlungen,…)</li>
					<li>nicht in Blockform beschreiben =&gt; untergliedern in Unterpunkten:
						(also: 1: User tippt ein 2: User klickt auf Suchbutton 3:…), die Fehlerbehandlung wird dann beschriftet mit der Nummer des Unterpunkts bei dem ein Fehler auftreten kann und 
						einem ’f’ (also: 2f: der Suchbutton hat keinen ActionListener), Alternativbehandlungen wie Fehlerbehandlung mit ’a’ (also 2a: Enter drücken)
						durch die Nummerierung leichter alle Fehler zu erkennen und abzudecken</li>
					<li>Stichwörter reichen</li>
					<li>Vorbedingungen sind keine Fehler (nur in einem von beiden beschreiben)</li>
					<li>Nachbedingungen können auch bei der Beschreibung stehen</li>
				</ul>
			</subsection>
			<subsection name="Nice to Haves">
				<ul>
					<li>bei der Bewertung angeben, dass sie von uns bzw. unseren Usern stammt und nicht von den externen Services übernommen wird</li>
					<li>bei den Events, wenn der User ein Datum eingeben kann für einen Event, dann muss ihm ein Kalender zur Verfügung gestellt werden</li>
				</ul>
			</subsection>
			<subsection name="Für Dienstag">
				<ul>
					<li>GUI Skizzen fertig machen</li>
					<li>Anwendungsfälle fertig machen</li>
					<li>ER-Diagramm fertig machen (Änderungen vorbehalten!)</li>
					<li>Work Breakdown Structure (ohne Abhängigkeiten, 3 Ebenen detailliert, Beispiel:
						1.Ebene: Entwurf 2.Ebene: GUI 3.Ebene: Skizze 3.Ebene Beschreibung (Zeitrahmen und geschätzten Aufwand angeben),
						bei Implementierung: Komponenten besser aufschlüsseln, Dauer immer aufsummiern)<br/>
						(falls fertig: mit GANTT Diagramm beginnen, Tools siehe Allgemeines)</li>
					<li>Deployment Diagramm: beginnen </li>
				</ul>
			</subsection>
		</section>
    <section name="Besprechungsprotokoll: 07.05.2009">
      <i> Anwesend: Jürgen Brandstetter, Anca Cismasiu, Ruth Kendlbacher, Mathias Kunter, Manuel Reithuber</i>
      <subsection name="GUI">
        die Art der Karte kann geändert werden z.B. Satellit (bei GoogleMaps dabei); <br/>
        es gibt unterschiedliche Typen von Icons für die Pins z.B. für Panoramio und oder Flickr eine Kamera
        <subsection name="TagCloud Suche">
          Klick auf Tag bewirkt eine neue Suchanfrage mit dem hinzugefügten Tag;<br/>
          Servicebezogene Tags werden nicht in der TagCloud angezeigt (z.B.: Panoramio, Foto, Wikipedia)<br/>
          <i>nice to have</i>: Service Tags in einer zweiten TagCloud
        </subsection>
        <subsection name="Navigation in der Karte">
          Karte wird verschoben mittels click and drag, in die Karte hineingezoomt wird mit dem Mausrad
        </subsection>
        <subsection name="Detailansicht">
          die Detailansicht wird beim Öffnen so verschoben, dass sie wenn möglich von nichts überlappt wird;<br/>
          <b>Aufbau</b>: oben Titel, Liste mit Tags unten, dazwischen html Seite (Struktur abhängig vom Service);
          <ul>
            <li>Wikipedia: Titel, Text (Artikel), Logo, Link auf die Quelle, Tags, Permalink</li>
            <li>Panoramio: Titel, Foto, Logo, Detail, Tags, Permalink</li>
            <li>LastFM: Eventname, Datum, Orz, Beginn, Logo, Detail, Tags, Permalink</li>
          </ul>
        </subsection>
        <subsection name="Crawler">
          brute force: in regelmäßigen Abständen werden die unterschiedlichen Services systematisch durchsucht;<br/>
          für die LVA wird das Gebiet auf Österreich beschränkt;<br/>
          der Crawler holt die Daten in einer Endlosschleife mit delay von den Services mit Hilfe einer Rastereinteilung;<br/>
          serviceabhängige Crawler haben servicespezifische Aktualisierungszeiträume;<br/>
        </subsection>
        <subsection name="Datenbank">
          wurde besprochen und teilweise verändert, für näheres siehe ER Diagramm
        </subsection>
      </subsection>
    </section>
    <section name="Besprechungsprotokoll: 12.05.2009">
      <i> Anwesend: Jürgen Brandstetter, Anca Cismasiu, Ruth Kendlbacher, Mathias Kunter, Christian Mastnak, Manuel Reithuber</i>
      <subsection name="Allgemeines">
        Liste mit den Richtlinien, die für Webanwendungen relevant sind is coming soon<br/>
        <i>(bitte einfügen: Allgemeines, das gesagt wurde, während ich noch nicht da war)</i>
      </subsection>
      <subsection name="MR2">
        Termin übernächste Woche;<br/>
        <b>Prototyp: </b> man soll sich überall durchklicken können und eine Funktion muss implementiert sein zum Herzeigen;<br/>
        JUnit Testklassen müssen implementiert werden (überprüfen, ob sie durchlaufen); Testfälle für MR2 noch nicht nötig;
        automatisierte GUI Tests wären möglich, aber relativ aufwendig (Christian könnte helfen)<br/>
        alles in SVN; Anwesenheitspflicht für MR2;
      </subsection>
      <subsection name="Anwendungsfallbeschreibungen">
        <ul>
          <li>Achtung: Konsistenz bei Aktoren:...</li>
          <li>sprachlich präziser, knapper, nur Stichworte</li>
          <li>keine GUI Beschreibungen in UC</li>
          <li>Vorbedingung sind keine Fehler, d.h. entweder wird ein gewisses Verhalten vorausgesetzt (dann eine Vorbedingung), oder es gibt Fehlerbehandlung</li>
          <li>Nonfunctional Constraints: müssen quantifizierbar sein; keine Erklärungen warum ein Nonfunctional Constraint</li>
          <li>Rechtschreibüberprüfung vor Abgabe</li>
          <li>überall dezidiert hinschreiben, wenn es eine Fehlermeldung gibt</li>
          <li>Umlaute einheitlich</li>
          <li>einheitliche Bezeichnungen (Pin-Marker-Stecknadel)</li>
          <li>Quellseite vs. Quelltext</li>
          <li>Vorsicht: was ist ein UC was nicht!!</li>
        </ul>
      </subsection>
      <subsection name="Für Dienstag">
        <i>(im Grunde alles was in der Artefaktenliste bei 'Interne Reviews: Projektplanung und -steuerung' steht)</i>
        <ul>
          <li>Work Breakdown Structure mit Terminen und Zeitabschäzungen</li>
          <li>Deploymentdiagramm</li>
          <li>Beschreibung der Attribute von DB (wie in Eingangsbeispiel) (besonders wichtig für Dinge, die in ER-Modell nicht modellierbar sind!)</li>
          <li>
            !Klassendiagramm!: muss fertig sein, bevor mit Implemenierung begonnen werden kann, am besten diese Woche noch fertigstellen<br/>
            (Möglichkeit mit fertigem KD mit Prof. Schatten einen Termin wegen der Technologien auszumachen)
          </li>
          <li>GANTT-Diagramm</li>
        </ul>
      </subsection>
      <section name="Besprechungsprotokoll: 14.05.2009">
        <i> Anwesend: Jürgen Brandstetter, Anca Cismasiu, Ruth Kendlbacher, Mathias Kunter, Manuel Reithuber</i>

        <ul>
          <li>Einführung in GWT (kleines Probeprojekt)</li>
          <li>TagCloud wird bei Client ausgerechnet, d.h. Client bekommt alle Objekte mit den zugehörigen Tags</li>
          <li>Test: Mocks werden benutzt, jeder schreibt Mocks für die Komponenten, die er benutzt; transactions-prinzip; für DB testen  2 Datenbanken (TestDB und produktivDB)</li>
          <li>wenn mehrere Orte mit selben Namen gefunden werden, wird das erste genommen</li>
          <li>zu allen Objekten wird ein Ablaufdatum gespeichert</li>
          <li>Klassendiagramm grob strukturiert und besprochen</li>
        </ul>
      </section>
      <section name="Besprechungsprotokoll: 19.05.2009">
        <i> Anwesend: Jürgen Brandstetter, Anca Cismasiu, Ruth Kendlbacher, Mathias Kunter, Christian Mastnak, Manuel Reithuber</i>
        <subsection name="Allgemeines">
          Donnerstag, 28.05.2009 09:00-10:00 MR2<br/>
          Dienstag davor die gesammelte Doku abgeben<br/>
          Doku gesammelt und ausgedruckt für MR2<br/>
          Stundenliste soll aktuell sein für MR2<br/>
          heute Vorlesung mit Fragestunde, spezieller Fokus aufs Testen
        </subsection>
          <subsection name="Dokumentation">
            <ul>
              <li>Use-Cases: passen, wenn ein UC komplett geändert wird, dann aktualisieren und Christian sagen</li>
              <li>Deployment-Diagramm: passt (fasst schon zu detailliert) - gut zum Erklären fürs MR"</li>
              <li>
                KLassendiagramm: was greift auf was zu? theoretisch ist es momentan möglich, dass GUI auf die DB zugreift; Schichtentrennung wichtig,
                damit Austausch später möglich; Business-Logic ist primär interessant, GUI nicht so wichtig; insert bzw update fehlt bei DAO
              </li>
              <li>GANTT-Diagramm: rot, gelb, grün keine gute Farbgebung, weckt falsche Assoziationen; von allen Tasks Vorgänger und Nachfolger einzeichnen</li>
              <li>WBS: passt</li>
              <li>DB-Attribut-Beschreibung: auf den ersten Blick ok, Christian schaut sie noch genau an</li>
              <li>Testartefakte beginnen</li>
              <li>Installationsleitfaden, so wie er in Maven Site ist für den Anfang ok</li>
            </ul>
          </subsection>
          <subsection name="Testen">
            <ul>
              <li>Testbeauftragter soll nur Beispiele für Tests machen, jeder soll selbst Tests schreiben;</li>
              <li>besser kleine und mehrere Tests;</li>
              <li>Mock-Tests sind sinnvoll (Framework für Mock-Tests: EasyMocks);</li>
              <li>UnitTests vor Implementierung, dann Modultests;</li>
              <li>Funktionstests, wenn Komponenten fertig sind, bzw. wenn alles fertig ist</li>
              <li>
                Technischer Architekt soll Code reviewen, eventuell 2mal das gesamte Team zusammen einen Code-Review durchführen
                (das erste mal, wenn die ersten Klassen implementiert sind, das zweite mal, wenn alles fertig ist)
              </li>
              <li>Testartefakte beginnen</li>
            </ul>
          </subsection>
      </section>
    </section>
	</body>
</document>
