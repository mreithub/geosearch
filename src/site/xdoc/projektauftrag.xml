<document>
	<properties>
		<author email="manuel.reithuber@student.tuwien.ac.at">Manuel Reithuber</author>
		<author email="brandiatmuhkuh@gmail.com">Jürgen Brandstetter</author>
		<author email="e0726383@student.tuwien.ac.at">Ruth Kendlbacher</author>
		<author email="e0625658@student.tuwien.ac.at">Mathias Kunter</author>
		<author email="e0727280@student.tuwien.ac.at">Anca Cismasiu</author>
		<title>Projektauftrag</title>
	</properties>
	<head>
		<style type="text/css">
			ol li {
				margin-bottom: 1em;
			}
		</style>
	</head>
	<body>
		<section name="Projektname">
			geoSearch
		</section>
		<section name="Ausgangssituation">
			Im Internet finden sich immer mehr Services, die ortsbezogene Daten wie z.B. Fotos, Sehenswürdigkeiten, Restaurants usw. anzeigen. Es gibt hierbei zwar
		  auf diversen Seiten die Möglichkeit, nach diesen Daten einzeln zu suchen, eine Suche nach unterschiedlichen geographischen Daten ist allerdings des öfteren mühsam.
      Unser Ziel ist es, verschiedenste geographische Daten über eine einzelne Webseite zugänglich zu machen, um diese auf einer Landkarte gesammelt anzeigen zu können.
		</section>
		<section name="Projektbeschreibung">
			<subsection name="Suche und GUI">
				Für einen Besucher der Homepage soll es möglichst einfach sein, verschiedene geographische Informationen zu einem spezifischen Ort bzw. zu einem spezifischen
        Schlagwort zu finden. Das zu durchsuchende geographische Gebiet wird dabei durch eine Ortsangabe eingeschränkt, während die Suche nach den Objekten selbst über
        Schlagwörter (Tags) erfolgt. Diese Tags sind für jedes zu suchende Objekt bekannt und ermöglichen das Auffinden der zu suchenden Informationen. Weiters soll es
        möglich sein über ein einzelnes Suchergebnis auf andere, ähnliche Suchergebnisse zu gelangen. Dies wird über eine TagCloud realisiert, die Tags zu ähnlichen
        Suchergebnissen beinhaltet.<br/>
				Ein <i>nice to have</i>-Feature ist die Möglichkeit, dass Benutzer die angezeigten Inhalte bewerten und eigene erstellen können.
			</subsection>
      <subsection name="Crawler und Datenbank">
        Die Crawler haben die Aufgabe auf verschiedene ortsbezogene Daten aus unterschiedlichen Datenquellen zuzugreifen. Diese Quellen sind (momentan)
        Wikipedia, Panoramio und LastFM, in einer späteren Ausbaustufe des Projektes können jedoch beliebige Datenquellen eingebunden werden.
        Die durch die Crawler gewonnenen Daten werden mitsamt beschreibenden Tags in unserer Datenbank gespeichert, um
        in weiterer Folge direkt über die Tags danach suchen zu können. Jeder Datenbank-Eintrag erhält außerdem einen Zeitstempel, der angibt bis wann der
        Eintrag gültig ist. Ist die Gültigkeitsdauer abgelaufen, wird der entsprechende Eintrag bei einer Suchanfrage vom Crawler zuerst neu geladen, um ihn
        zu aktualisieren.<br/>
        Die verwendeten Crawler müssen für jede Datenquelle eigenes geschrieben werden, da die APIs der verwendeten Services unterschiedlich
        sind. Als <i>nice to have</i>-Feature können diese Crawler später zu "echten" Suchmaschinen erweitert werden, die selbstständig erkennen
        welche Daten ortsbezogen sind und welche nicht.<br/>
        Der Unterschied zu vorhandenen Services wie z.B. GoogleMaps ist, dass die angezeigten Daten möglichst
        aktuell sind und regelmäßig von den Crawlern nachgeladen werden - so ist es z.B. möglich nach aktuellen Events und Veranstaltungen zu suchen.
        Weiters sind die meisten Seiten immer nur für eine bestimmte Zielgruppe reduziert, wodurch man selten alles findet was man möchte. Ein großer
        Vorteil ist die Wiederverwendbarkeit der geographischen Daten für andere Anbieter. Dies wird von uns durch eine einheitliche Schnittstelle zu unserer
        Datenbank sichergestellt.
      </subsection>
			<subsection name="API">
        Mithilfe einer zentralen API wird das Lesen und Schreiben der Daten standardisiert abgewickelt.<br/>
        Hierzu ein paar Beispiele:
        <ul>
					<li>
            Falls eine Applikation (Homepage) Bilder von Orten anzeigen will, bekommt diese mittels unserer API alle Bilder von Panoramio,
            Flickr, usw. (also alle unsere Datenbankeinträge in einem gewissen Umfeld) in einem Standardformat.
          </li>
					<li>
            Gibt es eine Applikation (Homepage), die Datenbestände verwaltet und bei uns eintragen will, ist dies auch mittels der API möglich.<br/>
            z.B.: <tt>hotels.com</tt> kann jegliche Änderung ihrer Daten automatisch an uns mittels API einspielen. So sind sind unsere
            Daten noch aktueller und wir brauchen keinen Crawler für diese Seite schreiben.
          </li>
					<li>
            Wir haben z.B. nur 3 Services, die wir bis jetzt Crawlen können. Kommt nun ein weiterer hinzu, ist das Schreiben eines neuen Crawlers
            einfacher, da standardisierte Schnittstellen vorliegen. Zusätzlich kann das Crawlen auf andere Server auslagern.
          </li>
					<li>
            Eine Änderung der GUI kann einfach umgesetzt werden.
          </li>
				</ul>
			</subsection>
		</section>
		<section name="Zielgruppe">
			<subsection name="Suchende USER (Hauptzielgruppe)">
				<ul>
					<li>Touristen: Jene Personen die in eine Stadt kommen, und sich einen Plan machen wollen, was sie in dieser Stadt tun können.</li>
					<li>Touristen und Einwohner: Suche nach einer Straße oder einem Ort.</li>
					<li>Stöbernde Person: Personen die einfach nur interessiert was es in einer Stadt so gibt.</li>
					<li>Personen die momentan etwas in ihrer Umgebung suchen (z.B. eine Person hat Hunger und will wissen wo das nächste Gasthaus ist)</li>
					<li>Partygeher: Personen die in ihrer Nähe die nächstgelegene Party oder Event suchen</li>
					<li>Touristen: Will wissen wo die nächste Bushaltestelle ist, und wann ein Bus von dort weg fährt <code>In späterer Ausbaustufe</code></li>
					<li>CityBiker: Der CityBiker möchte wissen wo die nächste CityBikeStation ist, und wie vielen Bikes noch da sind <code>In späterer Ausbaustufe</code></li>
				</ul>
			</subsection>
			<subsection name="Web-Entwickler">
				<ul>
					<li>Web- oder Applikations- Entwickler, die unsere Daten für eine eigene Applikationen verwenden wollen. (z.B. Eine Firma möchte alle ihre Filialen auf der eigenen Seite anzeigen.)</li>
					<li>Web-Entwickler die wollen dass ihre Daten bei uns gefunden werden.</li>
					<li>Web-Entwickler die ihre Daten bei uns gefunden werden, aber diese auch selbst anzeigen können. Somit sparen sie sich den Aufwand selbst ein GoogleMapsMashup zu machen.</li>
				</ul>
			</subsection>
			<subsection name="Content-Provider">
				<ul><li>Anbieter von positionsspezifischen Daten, die gerne auf unserer Seite verlinkt wären (oder eventuell unseren Service für die Anzeige ihrer Kartendaten verwenden wollen)</li></ul>
			</subsection>
		</section>
		<section name="Feature-Liste">
			<subsection name="Suchen">
				<ul>
					<li><b>Suche nach/in einem Gebiet:</b><br/>
						 In einem Textfeld kann die Region (Stadt, Land, Straße...) eingegeben werden, in der gesucht werden soll
						 beziehungsweise die gesucht werden soll. Die Suche in einem Gebiet kann kombiniert werden mit der Suche nach Tags.
					</li>
					<li><b>Suche nach Tags:</b><br/>
						In einem zweiten Textfeld kann nach Tags gesucht werden (z.B.: Events, Fotos, Lokale). Dies kann in Kombination
						mit einer Gebietssuche passieren. Bei jedem Suchvorgang (auch wenn nur ein Gebiet gesucht wird) wird eine TagCloud
						erstellt, die dem Sucher Schlagwörter zu dem bereits Gesuchten anzeigt und dadurch eine präzisere Suche erlaubt. 
					</li>
					<li><b>Oder-Suche:</b><br/>
						<i>nice-to-have</i> Zusätzlich zur Und-verknüpften Suche
					</li>
				</ul>
			</subsection>
			<subsection name="Anzeigen">
				<p>
					Die Suchergebnisse werden in einem bestimmten Bereich (Kartenausschnitt) dargestellt, dabei gibt es ein noch festzulegendes
					Limit für die Anzahl der Ergebnisse, die angezeigt werden können, um die Übersichtlichkeit zu wahren. Gleichzeitig wird die
					Gesamtanzahl der Treffer angezeigt gemeinsam mit der Anzahl der aktuell angezeigten Ergebnisse. Durch Hineinzoomen können
					die Ergebnisse detaillierter angezeigt werden, durch Hinauszoomen bekommt man einen genaueren Überblick über die Treffer.
				</p>
				<p>
					Zu jedem einzelnen Suchergebnis kann eine Detailansicht geöffnet werden, hier sind dann die konkret gefundenen Details, also
					Fotos, Events etc. zu sehen. Außerdem beinhaltet die Detailansicht einen Permalink, damit man den gefunden Inhalt auch direkt
					aufrufen kann.
				</p>
				<p>nice to have: Share-Möglichkeiten der Suchtreffer z.B.: über Social Networks.</p>
				<p>nice to have: Vote-Möglichkeit zur Bewertung der Treffer (es können Punkte vergeben werden und es gibt ein optionales Textfeld für Bemerkungen).</p>
			</subsection>
			<subsection name="API">
				<p>
					Die API ist das Herz der Applikation mit deren Hilfe die Daten an die Datenbank gesendet bzw. geschrieben werden können.
					Der Zugriff auf die Datenbank funktionert mittels RPC und REST Protokoll.
				</p>
				<p>
					<i>nice to have</i>-Feature: Es soll möglich sein, dass externe Seiten unsere Daten abfragen (und zum Beispiel auf ihrer eigenen Seite
					anzeigen können), verändern und hinzufügen können. 
				</p>
			</subsection>
			<subsection name="Crawler">
				<p>
					Der Crawler ist ein Interface, mit dessen Hilfe die Daten von den verschiedenen Websites (für jede Website gibt es einen eigenen
					Crawler, der das Interface implementiert) geholt und in die Datenbank gespeichert werden können. Alle Daten bekommen einen Zeitstempel
					und abhängig von der Information eine Gültigkeitsdauer. So lange die Information aktuell ist, wird sie direkt aus der Datenbank gelesen,
					ist die Gültigkeitsdauer abgelaufen, werden die Daten von der Website neu geholt und in der Datenbank aktualisiert. Zu Beginn gibt es
					eine Startapplikation, die die Daten in der Datenbank initialisiert. Ab diesem Zeitpunkt erhält sich die Datenbank quasi selbst, indem
					sie durch User-Requests ihre Daten permanent auf Gültigkeit überprüft und gegebenenfalls aktualisiert.
				</p>
			</subsection>
		</section>
		<section name="Verwendete Technologien">
			<ul>
				<li>
					Kommunikation und Dokumentation
					<ul>
						<li>Google Docs</li>
						<li>Laconica</li>
						<li>Trac</li>
						<li>Skype</li>
						<li>SMS</li>
					</ul>
				</li><li>
					Tools und Server
					<ul>
						<li>PostgreSQL Server (im Produktivbetrieb)</li>
						<li>Apache Tomcat</li>
						<li>Visual Paradigm</li>
						<li>Eclipse</li>
					</ul>
				</li><li>
					Source
					<ul>
						<li>Java Servlets (Seitenlogik)</li>
						<li>Java Server Pages (View)</li>
						<li>Java</li>
						<li>Maven</li>
						<li>Spring</li>
						<li>Subversion</li>
						<li>JUnit</li>
						<li>Log4J</li>
						<li>GWT (Google Web Toolkit)</li>
						<li>Google Maps API</li>
					</ul>
				</li>
			</ul>
		</section>
		<section name="Projektabgrenzung">
			<ul>
				<li>
					Ein Bewertungssystem, durch das die Wichtigkeit der einzelnen Einträge bestimmt werden kann (und so auch der Zoomfaktor,
					am dem das Objekt angezeigt wird, wird erst später implementiert.<br />
					Vorerst belassen wir es bei einer einfachen Beschränkung der Anzahl der angezeigten Objekte.
				</li>
				<li>
					Ein Eintragen von Objekten durch externe Benutzer (via externer REST-API) wird beim Entwurf berücksichtigt, soll aber
					erst später implementiert werden (da dafür eine Benutzerverwaltung und einige Webformulare implementiert werden müssten).
				</li>
				<li>
					Das Projekt verwendet kein eigenes Kartenmaterial, es wird auf die von Google zur Verfügung gestellten Google Maps API aufgebaut.
				</li>
				<li>
					Die suche beschränkt sich derzeit auf eine einfache Tagsuche (per '=' im SQL), da Volltextsuche zu performanceaufwendig wäre.
					Später wird eventuell auf Basis von Sphinx (www.sphinxsearch.com) eine Volltextsuche eingebaut.
				</li>
				<li>
					Das Projekt verlässt sich auf Google Maps zum finden der Orte. Die Tagsuche passiert nur im aktuell sichtbaren Kartenausschnitt.
				</li>
				<li>
					Es gibt derzeit keine Möglichkeit dass die Crawler automatisch (ohne API) beliebige Webeiten nach z.B. Adressen oder Koordinaten
					durchsuchen und deren Inhalt also geospezifische Information erkennen und in die Datenbank schreiben.
				</li>
			</ul>
		</section>
		<section name="Grober Projektplan">
			Die Ecktermine des Projekts werden wie folgt abgeschätzt:
			<table>
				<tr><th>Phase</th><th>Termin</th><th>Aufwand (h)</th></tr>
				<tr><td>Projektstart</td><td>06.04.2009</td><td>40</td></tr>
				<tr><td>Anforderungsanalyse</td><td>23.04.2009</td><td>60</td></tr>
				<tr><td>Entwurf</td><td>08.05.2009</td><td>200</td></tr>
				<tr>
          <td><b>Meilenstein: Alphaversion bzw. Prototyp erstellen</b><br/>
            Beinhaltet fertige GUI, Datenbank-Schema, Suchfunktion im Beta-Stadium (mit Testdaten, Anzeigen der Marker auf der Landkarte soll funktionieren)
          </td><td>22.05.2009</td><td>200</td>
        </tr>
				<tr><td>Applikation erstellen + Modultests</td><td>05.06.2009</td><td>200</td></tr>
				<tr><td>Systemtests abschließen</td><td>10.06.2009</td><td>50</td></tr>
				<tr>
          <td><b>Meilenstein: Betaversion erstellen</b><br/>
            Beinhaltet das Hinzufügen und Aktualisieren der Daten über die jeweiligen Crawler
        </td><td>14.06.2009</td><td>50</td></tr>
				<tr>
          <td><b>Meilenstein: Feinschliff und abschließende Fehlerbehebung</b><br/>
            Eine de-facto fertige Version soll existieren.
          </td><td>19.06.2009</td><td>100</td></tr>
				<tr>
          <td><b>Meilenstein: Projektabschluss</b><br/>
            Das Projekt ist abgeschlossen und wird dem Kunden übergeben bzw. vorgeführt.
          </td><td>30.06.2009</td><td>40</td></tr>
			</table>
		</section>
		<section name="Arbeitsstruktur / Rollenverteilung">
			<subsection name="Teamkoordinator">
				<p>
						Der Teamkoordinator ist für die interne Koordination, Kooperation und Kommunikation zuständig, er organisiert die Treffen zwischen den Gruppenmitgliedern und stellt in 
						Rücksprache mit den anderen Verantwortlichen (also dem Technischen Architekten, der Dokumentationsverantwortlichen, dem Testbeauftragten, der Stellvertreterin) eine 
						Agenda zusammen. Er hat den Gesamtüberblick über den Fortschritt des Projekts und kommuniziert Änderungen, Fehler etc. an das Team. Außerdem ist er auch für die 
						Kommunikation nach "außen" zuständig, er organisiert die Treffen mit dem Kunden, er hält die Präsentationen, er ist für Rücksprachen mit dem Kunden verantwortlich und 
						informiert über den Projektfortschritt. 
				</p>
			</subsection>
			<subsection name="Technischer Architekt">
				<p>
						Der Technische Architekt ist primär für die technischen Anforderungen an das Projekt und für das Design der Systemarchitektur verantwortlich. Er richtet die 
						Entwicklungsumgebung für das Team ein und ist der erste Ansprechpartner für die Implementierung und den Entwurf. Gemeinsam mit dem Teamkoordinator teilt er die einzelnen 
						Aufgaben bezüglich der Implementierung für die Teammitglieder ein und überwacht den Fortschritt, die Korrektheit und die technische Erfüllung der Anforderungen.
				</p>
			</subsection>
			<subsection name="Dokumentationsbeauftragte">
				<p>
						Die Dokumentationsbeauftragte erstellt die Richtlinien für das Team bezüglich der Dokumentation. Weiters überprüft sie die Einhaltung der festgelegten Richtlinien in der Doku, sie 
						sammelt und überwacht die Besprechungsprotokolle, sie hat die Übersicht über den Fortschritt der unterschiedlichen Dokumente und sie verteilt gemeinsam mit dem 
						Teamkoordinator die Aufgaben in Bezug auf das Dokumentieren.
				</p>
			</subsection>
			<subsection name="Testbeauftragter">
				<p>
						Der Testbeauftragte erstellt während dem Entwurfsprozess Testpläne und kommuniziert diese an das gesamte Team. Gemeinsam mit dem Teamkoordinator verteilt er die 
						unterschiedlichen Testfälle an die Teammitglieder, die sie durchführen und dem Testbeauftragten Rückmeldung bezüglich des Erfolgs / Misserfolgs geben. Er erstellt basierend 
						darauf Testberichte und macht vor allem dem Technischen Architekten Vorschläge in Hinblick auf Änderungen zur Verbesserung des Systems. Im Zuge des Testens ist er dafür 
						verantwortlich, dass Testdaten für alle verfügbar sind.
				</p>
			</subsection>
			<subsection name="Stellvertretende Teamkoordinatorin und Technische Architektin">
				<p>
						Sie vertritt den Teamkoordinator und den Technischen Architekten, wenn diese kurzfristig oder langfristig verhindert sind. In diesen Fällen übernimmt sie so gut wie möglich die 
						Aufgaben, die diesen beiden Rollen zugeteilt sind, wenn möglich in Rücksprache mit dem eigentlichen Teamkoordinator beziehungsweise dem Technischen Architekten. Da 
						temporäre Ausfälle auch unangekündigt und kurzfristig passieren können, soll sie immer darüber informiert sein, was der Teamkoordinator und der Technische Architekt planen 
						und wie sie dabei vorgehen wollen, damit sie schnell einspringen kann und sofort die Rolle des Abwesenden übernehmen kann. 
				</p>
			</subsection>
			<table>
				<tr><th>Rolle/n</th><th>Name</th><th>Matr.-Nr.</th><th>Kennz.</th><th>Email</th><th>Telefon</th></tr>
				<tr>
					<td>Teamkoordinator</td>
					<td>Jürgen Brandstetter</td>
					<td>0726015</td>
					<td>532</td>
					<td>j_brandstetter@weristin.at</td>
					<td>+43 650/237 92 75</td>
				</tr>
				<tr>
					<td>Technischer Architekt</td>
					<td>Manuel Reithuber</td>
					<td>0725031</td>
					<td>534</td>
					<td>manuel.reithuber@student.tuwien.ac.at</td>
					<td>+43 680/123 83 26</td>
				</tr>
				<tr>
					<td>Dokumentationsbeauftragte</td>
					<td>Ruth Kendlbacher</td>
					<td>0726383</td>
					<td>533</td>
					<td>e0726383@student.tuwien.ac.at</td>
					<td>+43 699/122 922 68</td>
				</tr>
				<tr>
					<td>Testbeauftragter</td>
					<td>Mathias Kunter</td>
					<td>0625658</td>
					<td>533</td>
					<td>e0625658@student.tuwien.ac.at</td>
					<td>+43 664/219 11 11</td>
				</tr>
				<tr>
					<td>Stf.TK<br/>Stv.TA</td>
					<td>Anca Cismasiu</td>
					<td>0727280</td>
					<td>532</td>
					<td>e0727280@student.tuwien.ac.at</td>
					<td>+43 676/402 83 75</td>
				</tr>
			</table>
		</section>
		<section name="Informationswesen">
			Die Gruppe trifft sich 1x wöchentlich intern (Donnerstags) und zusätzlich 1x pro Woche mit dem Tutor (Dienstags).<br/>
			Die Kommunikation im Team setzt sich folgendermaßen zusammen:

    			<ul>
				<li>Laconica (http://laconica.fakeroot.at): Kurze Benachrichtigungen über den eigenen Arbeitsfortschritt</li>
				<li>Mail-Verteiler: für längere Nachrichten</li>
				<li>SMS bzw. Instant messenger: für kurzfristige Nachrichten (meist in Kombination mit anderen Verfahren</li>
				<li>Subversion: Quellcode-Repository. Zusätzlich wird bei jedem subversion-commit automatisch eine Nachricht im laconica veröffentlicht.</li>
				<li>Google Docs: Dokumente, an denen gleichzeitig gearbeitet wird (wie z.B.: Kontaktliste, ...)</li>
				<li>Maven Site: Projektdokumentation, wird per Subversion verteilt</li>
				<li>Trac: ToDo-Liste, Zeitmanagement</li>
			</ul>
		</section>
		<section name="Besonderheiten">
			<ul>
				<li>Bei unserem Projekt handelt es sich um eine Webanwendung</li>
				<li>Webserver notwendig (bereits vorhanden)</li>
				<li>PostgreSQL (da es auf dem verwendeten Webserver bereits installiert ist)</li>
				<li>Keine GUI per Java SWING (da Webanwendung)</li>
			</ul>
		</section>
		<section name="Risikoabschätzung">
			<ol>
				<li>
					<b>Beschreibung</b>: kurzfristige Verhinderung eines Teammitglieds<br/>
					<b>Art</b>: Allgemeines Risiko<br/>
					<b>Typisierung</b>: Kann immer auftreten. Mögliche Verhinderungsgründe sind zum Beispiel Krankheit und unvorhersehbare Ereignisse.<br/>
					<b>Priorisierung</b>: Mittel<br/>
					<b>Eintrittswahrscheinlichkeit</b>: Hoch<br/>
					<b>Folgewirkung</b>: möglicherweise verzögerter Projektabschluss (Nummer 4)<br/>
					<b>Gegenmaßnahmen</b>: a) zur Verminderung: keine. b) bei Eintritt: Koordination der Aufgaben an die anderen Teammitglieder bzw. Mehrarbeit für das restliche Team<br/>
					<b>Verantwortlichkeit</b>: Projektleiter<br/>
				</li><li>
					<b>Beschreibung</b>: langfristige Verhinderung eines Teammitglieds<br/>
					<b>Art</b>: Allgemeines Risiko<br/>
					<b>Typisierung</b>: Kann immer auftreten.<br/>
					<b>Priorisierung</b>: Mittel<br/>
					<b>Eintrittswahrscheinlichkeit</b>: Niedrig<br/>
					<b>Folgewirkung</b>: verzögerter Projektabschluss (Nummer 4)<br/>
					<b>Gegenmaßnahmen</b>: siehe Risiko 1<br/>
					<b>Verantwortlichkeit</b>: Projektleiter<br/>
				</li><li>
					<b>Beschreibung</b>: APIs der Datenquellen-Anbieter funktionieren nicht wie vorgesehen.<br/>
					<b>Art</b>: Spezifisches Risiko<br/>
					<b>Typisierung</b>: Auftritt während der Entwicklung.<br/>
					<b>Priorisierung</b>: Hoch<br/>
					<b>Eintrittswahrscheinlichkeit</b>: Niedrig<br/>
					<b>Folgewirkung</b>: alternativen Datenanbieter verwenden (Nummer 5), möglicherweise verzögerter Projektabschluss (Nummer 4)<br/>
					<b>Gegenmaßnahmen</b>: a) zur Verminderung: frühzeitiges Verifizieren der APIs der Datenanbieter. b) bei Eintritt: alternativen Datenanbieter verwenden, Workaround verwenden<br/>
					<b>Verantwortlichkeit</b>: Team<br/>
				</li><li>
					<b>Beschreibung</b>: Verzögerter Projektabschluss.<br/>
					<b>Art</b>: Allgemeines Risiko<br/>
					<b>Typisierung</b>: Auftritt am Ende des Projekts.<br/>
					<b>Priorisierung</b>: Hoch<br/>
					<b>Eintrittswahrscheinlichkeit</b>: Mittel<br/>
					<b>Folgewirkung</b>: verspätete Abgabe.<br/>
					<b>Gegenmaßnahmen</b>: a) zur Verminderung: frühzeitige Mehrarbeit. b) bei Eintritt: noch mehr Mehrarbeit.<br/>
					<b>Verantwortlichkeit</b>: Team<br/>
				</li><li>
					<b>Beschreibung</b>: Es muss ein alternativer Datenanbieter verwendet werden, weil es Probleme mit einem vorgesehenen Datenanbieter gibt (z.B. der API-Zugriff auf dessen Daten funktioniert nicht wie erwartet)<br/>
					<b>Art</b>: Spezifisches Risiko<br/>
					<b>Typisierung</b>: Auftritt während der Entwicklung.<br/>
					<b>Priorisierung</b>: Hoch<br/>
					<b>Eintrittswahrscheinlichkeit</b>: Niedrig<br/>
					<b>Folgewirkung</b>: es werden möglicherweise nicht all jene Daten über GeoSearch gefunden, die eigentlich gefunden werden sollten. Möglicherweise verzögerter Projektabschluss (Nummer 4)<br/>
					<b>Gegenmaßnahmen</b>: a) zur Verminderung: frühzeitiges Verifizieren der APIs der Datenanbieter. b) bei Eintritt: keine.<br/>
					<b>Verantwortlichkeit</b>: Team<br/>
				</li><li>
					<b>Beschreibung</b>: Die Gruppenmitglieder kommen mit den Technologien nicht zurecht<br />
					<b>Art</b>: Spezifisches Risiko<br />
					<b>Typisierung</b>: Auftritt während der Entwicklung.<br />
					<b>Priorisierung</b>: Hoch<br />
					<b>Eintrittswahrscheinlichkeit</b>: Niedrig<br />
					<b>Folgewirkung</b>: verzögerter Projektabschluss (Nummer 4)<br />
					<b>Gegenmaßnahmen</b>: a) zur Verminderung: rechtzeitiges Kennenlernen der Technologien b) bei Eintritt: Mehrarbeit um das Projekt rechtzeitig fertig zu haben<br />
					<b>Verantwortlichkeit</b>: Team<br />
				</li><li>
					<b>Beschreibung</b>: Die Datenaktualisierungen erzeugen Inkonsistenz in der Datenbank<br />
					<b>Art</b>: Spezifisches Risiko<br />
					<b>Typisierung</b>: Auftritt nach dem Einsatz.<br />
					<b>Priorisierung</b>: Hoch<br />
					<b>Eintrittswahrscheinlichkeit</b>: Niedrig<br />
					<b>Folgewirkung</b>: Daten werden zweimal oder gar nicht angezeigt<br />
					<b>Gegenmaßnahmen</b>: a) zur Verminderung: frühzeitiges Testen der Datenbank b) bei Eintritt: Wartung.<br />
					<b>Verantwortlichkeit</b>: Team<br />
				</li><li>
					<b>Beschreibung</b>: Die API's der verschiedenen Services verändern sich<br />
					<b>Art</b>: Spezifisches Risiko<br />
					<b>Typisierung</b>: Auftritt nach Einsatz<br />
					<b>Priorisierung</b>: Hoch<br />
					<b>Eintrittswahrscheinlichkeit</b>: Mittel<br />
					<b>Folgewirkung</b>: Services werden nicht mehr (richtig) angezeigt<br />
					<b>Gegenmaßnahmen</b>: Crawler verändern<br />
					<b>Verantwortlichkeit</b>: Team<br />
				</li><li>
					<b>Beschreibung</b>: Server ist von der riesigen Datenmenge überfordert<br />
					<b>Art</b>: Spezifisches Risiko<br />
					<b>Typisierung</b>: Auftritt nach Einsatz<br />
					<b>Priorisierung</b>: Hoch<br />
					<b>Eintrittswahrscheinlichkeit</b>: Niedrig<br />
					<b>Folgewirkung</b>: Daten können nicht mehr in die Datenbank geschrieben, beziehungsweise aktualisiert werden<br />
					<b>Gegenmaßnahmen</b>: keine<br />
					<b>Verantwortlichkeit</b>: Team<br />
				</li>
			</ol>
		</section>
		<section name="Lieferkomponenten">
			<p>Folgende Komponenten werden nach Fertigstellung des Projekts ausgeliefert bzw. zur Verfügung gestellt:</p>
			<ul>
				<li>Funktionale geographische Online-Suche, die entweder auf einem Server von uns oder auf einem Server des Kunden gehostet werden kann</li>
				<li>Dokumente zur Anforderungsanalyse, Entwurf und Design</li>
				<li>ein technisches Handbuch (bzw. Installationshandbuch oder ähnliches)</li>
			</ul>
			<p>
				Falls das Projekt auf einem von uns gehosteten Server läuft, erfolgt die Abnahme durch Funktionstests.
				Falls das Projekt auf einem anderen Server laufen soll, ist zusätzlich das einmalige Aufsetzen dieses Servers erforderlich.
			</p>
			<p>Nicht im Kunden-Lieferumfang enthalten sind die folgenden Dokumente:</p>
			<ul>
				<li>Dokumente, die zur Erstellung von GeoSearch benötigt wurden (ER-Diagramme, Klassendiagramme etc.)</li>
				<li>Entwickler-Tools (Eclipse, Projektmanagement-Tools etc.)</li>
				<li>Interne Dokumente, die in erster Linie zur Koordination des Teams dienen</li>
			</ul>
		</section>
		<section name="Nichtfunktionale Anforderungen">
			<subsection name="Handhabung / Benutzbarkeit">
				<ul>
					<li>
						Die Suchmaschine soll in Hinblick auf Aussehen und Handhabung an bereits bestehende Suchmaschinen und Kartendienste angelehnt
						werden, sodass der User kaum Einarbeitungszeit benötigt, um mit dem System umgehen zu können.
					</li>
					<li>Die Website soll insgesamt übersichtlich gestaltet werden, sodass der User schnell die Information findet, die er sucht.</li>
				</ul>
			</subsection>
			<subsection name="Leistung">
				<ul><li>
					Durch eine bei der Einführung des Programms durchgeführte Startapplikation zur Dateninitialisierung und darauf folgende permanente
					Aktualisierung (durch Crawler und die Requests der User) der Datenbank, wird versucht die Antwortzeiten so gering wie möglich zu halten. 
				</li></ul>
			</subsection>
			<subsection name="Erweiterbarkeit">
				<ul><li>
					Das Programm soll so geschrieben und gekapselt werden, dass etwaige Erweiterungen und Änderungen bereits berücksichtigt werden,
					sodass es bei einem Ausbau des Projekts zu keinen großen Code-Änderungen mehr kommt.
				</li></ul>
			</subsection>
			<subsection name="Wartbarkeit">
				<ul><li>
					Der Code soll so formatiert, kommentiert, dokumentiert und getestet werden, dass es zu keinen langen Einarbeitungszeiten kommt,
					wenn Teile gewartet oder erweitert werden, v.a. auch von Personen, die mit der Projektentwicklung entweder gar nichts zu tun hatten
					oder an dem zu ändernden Teil nicht hauptsächlich mitgewirkt haben. 
				</li></ul>
			</subsection>
			<subsection name="Korrektheit">
				<ul><li>
					Die gesuchten Daten sollen auf der Karte korrekt angezeigt werden, das heißt, sie sollen genau ihrer Quelle entsprechen. Für die
					Korrektheit der Quellen können wir keine Verantwortung übernehmen. Eventuell wird eine Bewertung eingebaut, sodass die User die
					Möglichkeit haben, die Suchresultate zu bewerten, wodurch die Qualität der Informationen verbessert werden kann. 
				</li></ul>
			</subsection>
			<subsection name="Sicherheit">
				<ul><li>
					Die Datenbank soll vor unsachgemäßen Anfragen gesichert werden (z.B. SQL injections, input form validation), sodass es zu keinem
					ungewollten Datenverlust oder inkonsistenten Daten kommen kann.
				</li></ul>
			</subsection>
		</section>
		<section name="Funktionale Anforderungen, wichtigste Anwendungsfälle">
			<subsection name="User">
				<img src="images/usecase/user.jpg" alt="Bild: Anwendungsfalldiagramm Benutzer"/>
				<ul>
					<li><b>Suche in Gebiet:</b><br/>
						Der User kann in ein Textfeld das Gebiet (Stadt, Straße, etc.) eingeben in dem er suchen möchte,
						beziehungsweise das er suchen möchte.
					</li>
					<li><b>Suche mit Tags:</b><br/>
						Der User kann in ein Textfeld Schlagwörter (Fotos, Lokale, etc.) eingeben nach denen er suchen
						möchte. Die eingegebenen Schlagwörter werden mit den gespeicherten Tags in der Datenbank
						verglichen um die Ergebnisse zu finden.
					</li>
					<li><b>Suchen mit TagCloud</b><br/>
						Bei jeder Suche, die der User durchführt, wird eine TagCloud erstellt, die verwandte
						Suchebegriffe zur letzten Anfrage anzeigt. Mit der TagCloud kann der User nach ähnlichen
						oder vertiefenden Schlagwörtern suchen.
					</li>
					<li><b>Suchen durch Zoomen</b><br/>
						Das Ergebnis der Suche wird in einem Kartenausschnitt dargestellt, durch hineinzoomen wird
						der Kartenausschnitt verkleinert, was eine genauere Ansicht der Treffer ermöglicht. 
					</li>
					<li><b>Details zu den Suchergebnissen anzeigen</b><br/>
						Der Benutzer kann zu jedem Suchergebnis Details ansehen. Diese werden sichtbar sobald man
						auf der Karte auf das entsprechende Suchergebnis klickt. Welche Details hier angezeigt
						werden ist vom Typ des Eintrags abhängig. Bei einem Foto wird zum Beispiel das entsprechende
						Bild dargestellt, bei einem Wikipedia-Eintrag der Text des Artikels.
					</li>
					<li><b>Quelle des Eintrags anzeigen</b><br/>
						Da zu jedem Eintrag in der Datenbank ein permanenter Link gespeichert wird (die Quelle der Daten),
						kann der Benutzer direkt zur Quelle des Eintrags gelangen (z.B.: entsprechender Wikipedia-Artikel).
					</li>
					<li><b>Suchergebnis mit anderen Benutzern teilen</b><br/>
						<i>Nice to have</i>: Bei Bedarf können Suchergebnisse vom Benutzer mit bzw. an andere Personen
						geteilt werden. Dies erfolgt im einfachsten Fall per Permalink bzw. Email-Versand, könnte aber
						in weiterer Ausbaustufe auch z.B. per privater Nachricht auf Social-Networking Seiten etc. erfolgen.
					</li>
					<li><b>Suchergebnisse bewerten</b><br/>
						<i>Nice to have</i>: Der Benutzer soll die Möglichkeit haben, Suchergebnisse zu bewerten. Diese
						Bewertungen fließen in weiterer Folge in zukünftige Suchen mit ein und können somit dazu beitragen,
						qualitativ höherwertige Ergebnisse zu erzielen.
					</li>
				</ul>
				
				
				<ul>
				  <li><b><i>Identification summary</i></b>
					<ul>
					  <li><b>Titel: </b>Details zu den Suchergebnissen anzeigen</li>
					  <li><b>Kurzbeschreibung: </b>Der User klickt auf ein gefundenes Ergebniss, und dann macht sich eine Kurzübersicht auf.</li>
					  <li><b>Aktoren:</b> Besucher der Homepage</li>
					  <li><b>Erstellungsdaten:</b>Jürgen Brandstetter, 04.05.2009, V1.0</li>
					</ul>
				  </li>
				  <li><i><b>Scenario</b></i>
					<ul>
					  <li><b>Beschreibung:</b>Der/Die HomepageBesucher/inn gibt eine Suche ein. Diese werden dann als Icons auf der Karte angezeigt. Wenn er/sie dann auf das Icon klickt, macht sich ein Blase über dem Icon auf, indem diverse Infos zu diesem Ergebniss angezeigt werden.</li>
					  <li><b>Alternativszenario:</b>Durch den Parmalink des Ergebnisses kann dieses Icon + Blase auch angezeigt werden.</li>
					  <li><b>Fehlersituation:</b>Wird als Permalink ein Ergebniss (ID) verwendet die es nicht gibt, dann wird ein Fehler angezeigt.</li>
					  <li><b>Vorbedingung:</b>Da Ergebniss muss in der DB vorliegen.</li>
					</ul>
				  </li>
				  <li><b><i>Nonfunctional Constraints:</i></b> User soll nicht zu lange auf Ergebnisse warten müssen. (Polling Strategie finden)</li>
				</ul>
				
				
			</subsection>
			<subsection name="Externe Webseiten">
				<img src="images/usecase/extern.jpg" alt="Bild: Anwendungsfalldiagramm Extene WebSite"/>
				<ul>
					<li><b>Daten mittels API abfragen</b><br/>
						Anforderung: API soll eine REST und RPC Interface implementieren mit dessen hilfe Daten
						zwischen intenen und externen Servern und der GUI ausgetauscht werden können. Die REST
						Datenaustausch soll mit XML, und JSON funktionieren.
					</li>
				</ul>
			</subsection>
		</section>
		<section name="Domänenmodell">
			<img src="images/domaenenmodell.jpg" alt="Bild: Domänenmodell"/>
		</section>
		<section name="Komponentendiagramm">
			<img src="images/komponentendiagramm.jpg" alt="Bild: Komponentendiagramm"/>
		</section>
	</body>
</document>


